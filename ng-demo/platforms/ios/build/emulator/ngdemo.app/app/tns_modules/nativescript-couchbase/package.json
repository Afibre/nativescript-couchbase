{
  "name": "nativescript-couchbase",
  "version": "1.0.5",
  "description": "Couchbase Lite plugin for Telerik NativeScript",
  "main": "couchbase.js",
  "nativescript": {
    "platforms": {
      "android": "2.0.0",
      "ios": "2.0.0"
    }
  },
  "scripts": {
    "build": "tsc",
    "demo.ios": "npm run preparedemo; cd demo; tns emulate ios",
    "demo.android": "npm run preparedemo; cd demo; tns emulate android",
    "preparedemo": "npm run build; cd demo; tns plugin remove nativescript-couchbase; tns plugin add ..; tns install",
    "setup": "cd demo; npm install; cd ..; npm run build; cd demo; tns plugin add ..; cd .."
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/couchbaselabs/nativescript-couchbase.git"
  },
  "keywords": [
    "couchbase",
    "couchbase mobile",
    "couchbase lite",
    "nosql",
    "nativescript"
  ],
  "author": {
    "name": "Nic Raboy"
  },
  "license": "Apache-2.0",
  "readme": "# Couchbase Lite Plugin for Telerik NativeScript\n\nCouchbase Lite is a NoSQL embedded database for mobile devices.  It is a replacement for common database technologies like SQLite and Core Data.\n\n## Configuration\n\nBecause this plugin is experimental, it has not yet been added to the NPM repository.  After downloading this repository, either through direct download or cloning, do the following:\n\n```\ncd nativescript-couchbase-plugin/demo\nnpm install\ntns platform add android\ntns plugin add nativescript-couchbase\n```\n\nThis will download all the dependencies for the included demo project, add the Android build platform, and install the Couchbase plugin from the parent directory.\n\n## Usage\n\n### Including the Plugin in Your Project\n\n```javascript\nvar couchbaseModule = require(\"nativescript-couchbase\");\n```\n\n### Creating or Opening an Existing Database\n\n```javascript\nvar database = new couchbaseModule.Couchbase(\"test-database\");\n```\n\n### Managing the Data with CRUD Operations\n\n#### Creating a New Document\n\n```javascript\nvar documentId = database.createDocument({\n    \"firstname\": \"Nic\",\n    \"lastname\": \"Raboy\",\n    \"address\": {\n        \"city\": \"San Francisco\",\n        \"state\": \"CA\",\n        \"country\": \"USA\"\n    }\n    \"twitter\": \"https://www.twitter.com/nraboy\"\n});\n```\n\n#### Retrieving an Existing Document\n\n```javascript\nvar person = database.getDocument(documentId);\n```\n\n#### Updating an Existing Document\n\n```javascript\ndatabase.updateDocument(documentId, {\n    \"firstname\": \"Nicolas\",\n    \"lastname\": \"Raboy\",\n    \"twitter\": \"https://www.twitter.com/nraboy\"\n});\n```\n\n#### Deleting a Document\n\n```javascript\nvar isDeleted = database.deleteDocument(documentId);\n```\n\n### Querying with MapReduce Views\n\nKnowing the document id isn't always an option.  With this in mind, multiple documents can be queried using criteria defined in a view.\n\n#### Creating a MapReduce View\n\nA MapReduce View will emit a key-value pair.  Logic can be placed around the **emitter** to make the views more specific.\n\n```javascript\ndatabase.createView(\"people\", \"1\", function(document, emitter) {\n    emitter.emit(JSON.parse(document)._id, document);\n});\n```\n\n#### Querying a MapReduce View\n\n```javascript\nvar rows = database.executeQuery(\"people\");\nfor(var i in rows) {\n    if(rows.hasOwnProperty(i)) {\n        personList.push(JSON.parse(rows[i]));\n    }\n}\n```\n\n## Synchronization with Couchbase Sync Gateway and Couchbase Server\n\nCouchbase Lite can work in combination with Couchbase Sync Gateway to offer synchronization support between devices and platforms.  Couchbase Sync Gateway **is not** a requirement to use Couchbase Lite if the goal is to only use it for offline purposes.\n\nCouchbase Sync Gateway can be downloaded via the [Couchbase Downloads Portal](http://www.couchbase.com/downloads) in the mobile section.\n\nA demo configuration file for Sync Gateway is included in the **demo** directory.  It can be started by executing the following from a Command Prompt or Terminal:\n\n```\n/path/to/sync/gateway/bin/sync_gateway /path/to/demo/sync-gateway-config.json\n```\n\nIn the demo configuration file, Couchbase Server is not used, but instead an in-memory database good for prototyping.  It can be accessed via **http://localhost:4985/_admin/** in your web browser.\n\nTo replicate between the local device and server, the following must be added to your project:\n\n```javascript\nvar couchbaseModule = require(\"nativescript-couchbase\");\ndatabase = new couchbaseModule.Couchbase(\"test-database\");\n\nvar push = database.createPushReplication(\"http://sync-gateway-host:4984/test-database\");\nvar pull = database.createPullReplication(\"http://sync-gateway-host:4984/test-database\");\npush.setContinuous(true);\npull.setContinuous(true);\npush.start();\npull.start();\n```\n\nData will now continuously be replicated between the local device and Sync Gateway.\n\n### Listening for Changes\n\n```javascript\ndatabase.addDatabaseChangeListener(function(changes) {\n    for(var i = 0; i < changes.length; i++) {\n        console.log(changes[i].getDocumentId());\n    }\n});\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "688f0d522ffac7c76fcef4fd10f633b1dbcbdac7",
  "bugs": {
    "url": "https://github.com/couchbaselabs/nativescript-couchbase/issues"
  },
  "homepage": "https://github.com/couchbaselabs/nativescript-couchbase#readme",
  "_id": "nativescript-couchbase@1.0.5",
  "_shasum": "fbf6e6182ebb0c118a521e2f0f43eb4845c9b681",
  "_from": "..",
  "_resolved": "file:.."
}
